<?php

/**
 * Code completion code.
 * Generated by ccc Artisan command.
 */

class Auth extends Laravel\Auth\Drivers\Eloquent{};
class_alias('Auth', 'Laravel\Auth\Drivers\Eloquent');
abstract class Authenticator extends Laravel\Auth\Drivers\Driver{};
class_alias('Authenticator', 'Laravel\Auth\Drivers\Driver');
class Asset extends Laravel\Asset{};
class_alias('Asset', 'Laravel\Asset');
class Autoloader extends Laravel\Autoloader{};
class_alias('Autoloader', 'Laravel\Autoloader');
class Blade extends Laravel\Blade{};
class_alias('Blade', 'Laravel\Blade');
class Bundle extends Laravel\Bundle{};
class_alias('Bundle', 'Laravel\Bundle');
class Cache extends Laravel\Cache\Drivers\File{};
class_alias('Cache', 'Laravel\Cache\Drivers\File');
class Config extends Laravel\Config{};
class_alias('Config', 'Laravel\Config');
class Controller extends Laravel\Routing\Controller{};
class_alias('Controller', 'Laravel\Routing\Controller');
class Cookie extends Laravel\Cookie{};
class_alias('Cookie', 'Laravel\Cookie');
class Crypter extends Laravel\Crypter{};
class_alias('Crypter', 'Laravel\Crypter');
class DB extends Laravel\Database\Query\Grammars\MySQL{};
class_alias('DB', 'Laravel\Database\Query\Grammars\MySQL');
class Eloquent extends Laravel\Database\Eloquent\Model{};
class_alias('Eloquent', 'Laravel\Database\Eloquent\Model');
class Event extends Laravel\Event{};
class_alias('Event', 'Laravel\Event');
class File extends Laravel\File{};
class_alias('File', 'Laravel\File');
class Filter extends Laravel\Routing\Filter{};
class_alias('Filter', 'Laravel\Routing\Filter');
class Form extends Laravel\Form{};
class_alias('Form', 'Laravel\Form');
class Hash extends Laravel\Hash{};
class_alias('Hash', 'Laravel\Hash');
class HTML extends Laravel\HTML{};
class_alias('HTML', 'Laravel\HTML');
class Input extends Laravel\Input{};
class_alias('Input', 'Laravel\Input');
class IoC extends Laravel\IoC{};
class_alias('IoC', 'Laravel\IoC');
class Lang extends Laravel\Lang{};
class_alias('Lang', 'Laravel\Lang');
class Log extends Laravel\Log{};
class_alias('Log', 'Laravel\Log');
class Memcached extends Laravel\Memcached{};
class_alias('Memcached', 'Laravel\Memcached');
class Paginator extends Laravel\Paginator{};
class_alias('Paginator', 'Laravel\Paginator');
class Profiler extends Laravel\Profiling\Profiler{};
class_alias('Profiler', 'Laravel\Profiling\Profiler');
class URL extends Laravel\URL{};
class_alias('URL', 'Laravel\URL');
class Redirect extends Laravel\Redirect{};
class_alias('Redirect', 'Laravel\Redirect');
class Redis extends Laravel\Redis{};
class_alias('Redis', 'Laravel\Redis');
class Request extends Laravel\Request{};
class_alias('Request', 'Laravel\Request');
class Response extends Laravel\Response{};
class_alias('Response', 'Laravel\Response');
class Route extends Laravel\Routing\Route{};
class_alias('Route', 'Laravel\Routing\Route');
class Router extends Laravel\Routing\Router{};
class_alias('Router', 'Laravel\Routing\Router');
class Schema extends Laravel\Database\Schema{};
class_alias('Schema', 'Laravel\Database\Schema');
class Section extends Laravel\Section{};
class_alias('Section', 'Laravel\Section');
class Session extends Laravel\Session\Payload{
// Generated from /home/hiro/public_html/l32/Laravel-base-32/laravel/session/drivers/file.php
// But maybe they are not so useful... :)
	public function __construct($path){}
	public function load($id){}
	public function save($session, $config, $exists){}
	public function delete($id){}
	public function sweep($expiration){}
};
class Str extends Laravel\Str{};
class_alias('Str', 'Laravel\Str');
class Task extends Laravel\CLI\Tasks\Task{};
class_alias('Task', 'Laravel\CLI\Tasks\Task');
class URI extends Laravel\URI{};
class_alias('URI', 'Laravel\URI');
class Validator extends Laravel\Validator{};
class_alias('Validator', 'Laravel\Validator');
class View extends Laravel\View{};
class_alias('View', 'Laravel\View');
/**
* @method assertArrayHasKey(mixed $key, array $array, string $message = '')
* @method assertArrayNotHasKey(mixed $key, array $array, string $message = '')
* @method assertAttributeContains(mixed $needle, string $haystackAttributeName, mixed $haystackClassOrObject, string $message = '', boolean $ignoreCase = false, boolean $checkForObjectIdentity = true)
* @method assertAttributeContainsOnly(string $type, string $haystackAttributeName, mixed $haystackClassOrObject, boolean $isNativeType = null, string $message = '')
* @method assertAttributeCount(integer $expectedCount, string $haystackAttributeName, mixed $haystackClassOrObject, string $message = '')
* @method assertAttributeEmpty(string $haystackAttributeName, mixed $haystackClassOrObject, $message = '')
* @method assertAttributeEquals(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = '', float $delta = 0, integer $maxDepth = 10, boolean $canonicalize = false, boolean $ignoreCase = false)
* @method assertAttributeGreaterThan(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = '')
* @method assertAttributeGreaterThanOrEqual(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = '')
* @method assertAttributeInstanceOf(@param string $expected, string $attributeName, mixed $classOrObject, string $message = '')
* @method assertAttributeInternalType(string $expected, string $attributeName, mixed $classOrObject, string $message = '')
* @method assertAttributeLessThan(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = '')
* @method assertAttributeLessThanOrEqual(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = '')
* @method assertAttributeNotContains(mixed $needle, string $haystackAttributeName, mixed $haystackClassOrObject, string $message = '', boolean $ignoreCase = false, boolean $checkForObjectIdentity = true)
* @method assertAttributeNotContainsOnly(string $type, string $haystackAttributeName, mixed $haystackClassOrObject, boolean $isNativeType = null, string $message = '')
* @method assertAttributeNotCount(integer $expectedCount, string $haystackAttributeName, mixed $haystackClassOrObject, string $message = '')
* @method assertAttributeNotEmpty(string $haystackAttributeName, mixed $haystackClassOrObject, string $message = '')
* @method assertAttributeNotEquals(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = '', float $delta = 0, integer $maxDepth = 10, boolean $canonicalize = false, boolean $ignoreCase = false)
* @method assertAttributeNotInstanceOf(string $expected, string $attributeName, mixed $classOrObject, string $message = '')
* @method assertAttributeNotInternalType(string $expected, string $attributeName, mixed $classOrObject, string $message = '')
* @method assertAttributeNotSame(mixed $expected, string $actualAttributeName, object $actualClassOrObject, string $message = '')
* @method assertAttributeSame(mixed $expected, string $actualAttributeName, object $actualClassOrObject, string $message = '')
* @method assertClassHasAttribute(string $attributeName, string $className, string $message = '')
* @method assertClassHasStaticAttribute(string $attributeName, string $className, string $message = '')
* @method assertClassNotHasAttribute(string $attributeName, string $className, string $message = '')
* @method assertClassNotHasStaticAttribute(string $attributeName, string $className, string $message = '')
* @method assertContains(mixed $needle, mixed $haystack, string $message = '', boolean $ignoreCase = false, boolean $checkForObjectIdentity = true)
* @method assertContainsOnly(string $type, mixed $haystack, boolean $isNativeType = null, string $message = '')
* @method assertCount(integer $expectedCount, mixed $haystack, string $message = '')
* @method assertEmpty(mixed $actual, string $message = '')
* @method assertEqualXMLStructure(DOMElement $expectedElement, DOMElement $actualElement, boolean $checkAttributes = false, string $message = '')
* @method assertEquals(mixed $expected, mixed $actual, string $message = '', float $delta = 0, integer $maxDepth = 10, boolean $canonicalize = false, boolean $ignoreCase = false)
* @method assertFalse(boolean $condition, string $message = '')
* @method assertFileEquals(string $expected, string $actual, string $message = '', boolean $canonicalize = false, boolean $ignoreCase = false)
* @method assertFileExists(string $filename, string $message = '')
* @method assertFileNotEquals(string $expected, string $actual, string $message = '', boolean $canonicalize = false, boolean $ignoreCase = false)
* @method assertFileNotExists(string $filename, string $message = '')
* @method assertGreaterThan(mixed $expected, mixed $actual, string $message = '')
* @method assertGreaterThanOrEqual(mixed $expected, mixed $actual, string $message = '')
* @method assertInstanceOf(string $expected, mixed $actual, string $message = '')
* @method assertInternalType(string $expected, mixed $actual, string $message = '')
* @method assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson, string $message = '')
* @method assertJsonStringNotEqualsJsonString(string $expectedJson, string $actualJson, string $message = '')
* @method assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson, string $message = '')
* @method assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson, string $message = '')
* @method assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile, string $message = '')
* @method assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile, string $message = '')
* @method assertLessThan(mixed $expected, mixed $actual, string $message = '')
* @method assertLessThanOrEqual(mixed $expected, mixed $actual, string $message = '')
* @method assertNotContains(mixed $needle, mixed $haystack, string $message = '', boolean $ignoreCase = false, boolean $checkForObjectIdentity = true)
* @method assertNotContainsOnly(string $type, mixed $haystack, boolean $isNativeType = null, string $message = '')
* @method assertNotCount(integer $expectedCount, mixed $haystack, string $message = '')
* @method assertNotEmpty(mixed $actual, string $message = '')
* @method assertNotEquals(mixed $expected, mixed $actual, string $message = '', float $delta = 0, integer $maxDepth = 10, boolean $canonicalize = false, boolean $ignoreCase = false)
* @method assertNotInstanceOf(string $expected, mixed $actual, string $message = '')
* @method assertNotInternalType(string $expected, mixed $actual, string $message = '')
* @method assertNotNull(mixed $actual, string $message = '')
* @method assertNotRegExp(string $pattern, string $string, string $message = '')
* @method assertNotSame(mixed $expected, mixed $actual, string $message = '')
* @method assertNotSameSize(integer $expected, mixed $actual, string $message = '')
* @method assertNotTag(array $matcher, string $actual, string $message = '', boolean $isHtml = true)
* @method assertNull(mixed $actual, string $message = '')
* @method assertObjectHasAttribute(string $attributeName, object $object, string $message = '')
* @method assertObjectNotHasAttribute(string $attributeName, object $object, string $message = '')
* @method assertRegExp(string $pattern, string $string, string $message = '')
* @method assertSame( mixed $expected, mixed $actual, string $message = '')
* @method assertSameSize(integer $expected, mixed $actual, string $message = '')
* @method assertSelectCount(array $selector, integer $count, mixed $actual, string $message = '', boolean $isHtml = true)
* @method assertSelectEquals(array $selector, string $content, integer $count, mixed $actual, string $message = '', boolean $isHtml = true)
* @method assertSelectRegExp(array $selector, string $pattern, integer $count, mixed $actual, string $message = '', boolean $isHtml = true)
* @method assertStringEndsNotWith(string $suffix, string $string, string $message = '')
* @method assertStringEndsWith(string $suffix, string $string, string $message = '')
* @method assertStringEqualsFile(string $expectedFile, string $actualString, string $message = '', boolean $canonicalize = false, boolean $ignoreCase = false)
* @method assertStringMatchesFormat(string $format, string $string, string $message = '')
* @method assertStringMatchesFormatFile(string $formatFile, string $string, string $message = '')
* @method assertStringNotEqualsFile(string $expectedFile, string $actualString, string $message = '', boolean $canonicalize = false, boolean $ignoreCase = false)
* @method assertStringNotMatchesFormat(string $format, string $string, string $message = '')
* @method assertStringNotMatchesFormatFile(string $formatFile, string $string, string $message = '')
* @method assertStringStartsNotWith(string $prefix, string $string, string $message = '')
* @method assertStringStartsWith(string $prefix, string $string, string $message = '')
* @method assertTag(array $matcher, string $actual, string $message = '', boolean $isHtml = true)
* @method assertThat(mixed $value, PHPUnit_Framework_Constraint $constraint, string $message = '')
* @method assertTrue(boolean $condition, string $message = '')
* @method assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile, string $message = '')
* @method assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile, string $message = '')
* @method assertXmlStringEqualsXmlFile(string $expectedFile, string $actualXml, string $message = '')
* @method assertXmlStringEqualsXmlString(string $expectedXml, string $actualXml, string $message = '')
* @method assertXmlStringNotEqualsXmlFile(string $expectedFile, string $actualXml, string $message = '')
* @method assertXmlStringNotEqualsXmlString(string $expectedXml, string $actualXml, string $message = '')
*/
class PHPUnit_Framework_TestCase {};
// End of code generation
