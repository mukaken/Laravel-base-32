<?php

/**
 * コードコンプリーションコードジェネレーター
 */
class Ccc_Task extends Task
{
	/**
	 * 生成コードの先頭につけるコード
	 * @var type array
	 */
	private static $header = array(
		'<?php',
		'',
		'/**',
		' * Code completion code.',
		' * Generated by ccc Artisan command.',
		' */',
		'',
	);

	/**
	 * 生成コードの末尾につけるコード
	 * @var type array
	 */
	private static $footer = array(
		'// End of code generation'
	);

	/**
	 * Abstractクラス
	 * @var type array
	 */
	private static $abstracts = array( 'Authenticator' );

	/**
	 * function定義をクラス定義に付け加えるためのコード
	 *
	 * 自動に生成されるコードで足りない場合、
	 * 自分でfunctionを定義することで、補完できるようになる
	 * クラス名がキー、追加するコードを値として定義する
	 *
	 * @var type array
	 */
	private static $extra = array(
		'Example_class_name' => array(
			'    function add_code_1() {}',
			'    function add_code_2($arg1, $arg2) {}',
		),
	);

	/**
	 * 生成コードの表示
	 *
	 * 使用法：
	 * 		php artisan ccc
	 *
	 * @return integer 実行結果コード
	 */
	public function run()
	{
		echo $this->generator();

		exit(0);
	}

	/**
	 * コード補完コードを生成し、ファイルに保存する
	 *
	 * 使用法
	 * 		// application/ccc.phpに保存
	 * 			php artisan ccc:save
	 *
	 * 		// パラメーターで保存ファイルを指定
	 * 			php artisan ccc:save application/cc_helper.php
	 *
	 * @param string $outfile 出力ファイル名
	 * @return integer 実行結果コード
	 */
	public function save($arguments)
	{
		$outfile = count($arguments) == 0 ? path('app')."ccc.php" : $arguments[0];

		$codes = $this->generator();

		File::put($outfile, $codes);

		exit(0);
	}

	/**
	 * ジェネレーター本体
	 *
	 * @return string 生成コード
	 */
	private function generator()
	{
		$codeline = array( );
		$codeline[] = self::$header;

		$aliases = Config::get('application.aliases');

		foreach ( $aliases as $alias => $namespace ) {
			switch ( $alias ) {
				case 'Auth' :
					switch ( Config::get('auth.driver') ) {
						case 'eloquent' :
							$codeline[] = $this->format_code($alias, 'Laravel\Auth\Drivers\Eloquent');
							break;
						case 'fluent' :
							$codeline[] = $this->format_code($alias, 'Laravel\Auth\Drivers\Fluent');
							break;
						default :
							// throw new \Exception("Bad Auth driver [$alias] specified.");
							$codeline[] = "// Auth driver [$alias] is not supported by this generator. Please set this by your hand.";
							$codeline[] = '// class '.$alias.' extends '.$namespace.'{};';
							$codeline[] = 'class_alias(\''.$alias.'\', \''.$namespace.'\');';
					}
					break;
				case 'DB' :
					switch ( Config::get('database.default') ) {
						case 'sqlite':
							$namespace = 'Laravel\Database\Query\Grammars\SQLite';
							break;
						case 'mysql':
							$namespace = 'Laravel\Database\Query\Grammars\MySQL';
							break;
						case 'pgsql':
							$namespace = 'Laravel\Database\Query\Grammars\Postgres';
							break;
						case 'sqlsrv':
							$namespace = 'Laravel\Database\Query\Grammars\SQLServer';
							break;
						default:
							// throw new \Exception("Bad database default driver [$alias] specified.");
							$codeline[] = "// DB default driver [$alias] is not supported by this generator. Please set this by your hand.";
							$codeline[] = '// class '.$alias.' extends '.$namespace.'{};';
							$codeline[] = 'class_alias(\''.$alias.'\', \''.$namespace.'\');';
					}
					$codeline[] = $this->format_code($alias, $namespace);
					break;
				case 'Cache' :
					switch ( Config::get('cache.driver') ) {
						case 'apc':
							$codeline[] = $this->format_code($alias, 'Laravel\Cache\Drivers\APC');
							break;
						case 'file':
							$codeline[] = $this->format_code($alias, 'Laravel\Cache\Drivers\File');
							break;
						case 'memcached':
							$codeline[] = $this->format_code($alias, 'Laravel\Cache\Drivers\Memcached');
							break;
						case 'memory':
							$codeline[] = $this->format_code($alias, 'Laravel\Cache\Drivers\Memory');
							break;
						case 'redis':
							$codeline[] = $this->format_code($alias, 'Laravel\Cache\Drivers\Redis');
							break;
						case 'database':
							$codeline[] = $this->format_code($alias, 'Laravel\Cache\Drivers\Database');
							break;
						default:
							// throw new \Exception("Bad Cache driver [$alias] specified.");
							$codeline[] = "// Cache driver [$alias] is not supported by this generator. Please set this by your hand.";
							$codeline[] = '// class '.$alias.' extends '.$namespace.'{};';
							$codeline[] = 'class_alias(\''.$alias.'\', \''.$namespace.'\');';
					}
					break;
				case 'Session' :
					switch ( Config::get('session.driver') ) {
						case 'apc':
							$drivername = 'Session\Drivers\APC';
							break;
						case 'cookie':
							$drivername = 'Session\Drivers\Cookie';
							break;
						case 'database':
							$drivername = 'Session\Drivers\Database';
							break;
						case 'file':
							$drivername = 'Session\Drivers\File';
							break;
						case 'memcached':
							$drivername = 'Session\Drivers\Memcached';
							break;
						case 'memory':
							$drivername = 'Session\Drivers\Memory';
							break;
						case 'redis':
							$drivername = 'Session\Drivers\Redis';
							break;
						default:
							// throw new \Exception("Bad Session driver [$alias] specified.");
							$codeline[] = "// Session driver [$alias] is not supported by this generator. Please set this by your hand.";
							$codeline[] = '// class '.$alias.' extends '.$namespace.'{};';
							$codeline[] = 'class_alias(\''.$alias.'\', \''.$namespace.'\');';
					}
					$drivername = strtr(path('sys').Str::lower($drivername.EXT), '\\', '/');
					$script = explode(PHP_EOL, File::get($drivername, "// Failed to read driver soruce file:[$drivername]"));

					$add = preg_grep("/function\s+\w+\s*\(.+\)/", $script);
					array_walk(&$add, function(&$val) {
							$val.='{}';
						});
					$add = array(
						"// Generated from $drivername",
						"// But maybe they are not so useful... :)",
						$add);

					$codeline[] = $this->format_code($alias, "Laravel\Session\Payload", $add);
					break;
				default :
					$codeline[] = $this->format_code($alias, $namespace);
			}
		}

		$codeline[] = self::$footer;
		$codeline[] = '';

		$flatcode = array( );
		array_walk_recursive($codeline, function($val) use (&$flatcode) {
				$flatcode[] = $val;
			});

		return implode(PHP_EOL, $flatcode);
	}

	/**
	 * クラスの定義をフォーマット
	 *
	 * @param string $alias エイリアス名
	 * @param string $namespace 名前空間
	 * @return array
	 */
	private function format_code($alias, $namespace, $addcodes = array( ))
	{
		$abs = in_array($alias, self::$abstracts) ? 'abstract ' : '';

		if ( key_exists($alias, self::$extra) || !empty($addcodes) ) {
			$ret = array( );
			$ret[] = $abs.'class '.$alias.' extends '.$namespace.'{';
			if ( key_exists($alias, self::$extra) )
				$ret[] = self::$extra[$alias];
			if ( !empty($addcodes) )
				$ret[] = $addcodes;
			$ret[] = '};';
			return $ret;
		}
		else {
			return array(
				$abs.'class '.$alias.' extends '.$namespace.'{};',
				'class_alias(\''.$alias.'\', \''.$namespace.'\');',
			);
		}
	}

}