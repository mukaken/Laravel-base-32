<?php

/**
 * コードコンプリーションコードジェネレーター
 */
class Ccc_Task extends Task
{
	/**
	 * 生成コードの先頭につけるコード
	 * @var type array
	 */
	private static $header = array(
		'<?php',
		'',
		'/**',
		' * Code completion code.',
		' * Generated by ccc Artisan command.',
		' */',
		'',
	);

	/**
	 * 生成コードの末尾につけるコード
	 * @var type array
	 */
	private static $footer = array(
		'/**',
		'* @method assertArrayHasKey(mixed $key, array $array, string $message = \'\')',
		'* @method assertArrayNotHasKey(mixed $key, array $array, string $message = \'\')',
		'* @method assertAttributeContains(mixed $needle, string $haystackAttributeName, mixed $haystackClassOrObject, string $message = \'\', boolean $ignoreCase = false, boolean $checkForObjectIdentity = true)',
		'* @method assertAttributeContainsOnly(string $type, string $haystackAttributeName, mixed $haystackClassOrObject, boolean $isNativeType = null, string $message = \'\')',
		'* @method assertAttributeCount(integer $expectedCount, string $haystackAttributeName, mixed $haystackClassOrObject, string $message = \'\')',
		'* @method assertAttributeEmpty(string $haystackAttributeName, mixed $haystackClassOrObject, $message = \'\')',
		'* @method assertAttributeEquals(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = \'\', float $delta = 0, integer $maxDepth = 10, boolean $canonicalize = false, boolean $ignoreCase = false)',
		'* @method assertAttributeGreaterThan(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = \'\')',
		'* @method assertAttributeGreaterThanOrEqual(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = \'\')',
		'* @method assertAttributeInstanceOf(@param string $expected, string $attributeName, mixed $classOrObject, string $message = \'\')',
		'* @method assertAttributeInternalType(string $expected, string $attributeName, mixed $classOrObject, string $message = \'\')',
		'* @method assertAttributeLessThan(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = \'\')',
		'* @method assertAttributeLessThanOrEqual(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = \'\')',
		'* @method assertAttributeNotContains(mixed $needle, string $haystackAttributeName, mixed $haystackClassOrObject, string $message = \'\', boolean $ignoreCase = false, boolean $checkForObjectIdentity = true)',
		'* @method assertAttributeNotContainsOnly(string $type, string $haystackAttributeName, mixed $haystackClassOrObject, boolean $isNativeType = null, string $message = \'\')',
		'* @method assertAttributeNotCount(integer $expectedCount, string $haystackAttributeName, mixed $haystackClassOrObject, string $message = \'\')',
		'* @method assertAttributeNotEmpty(string $haystackAttributeName, mixed $haystackClassOrObject, string $message = \'\')',
		'* @method assertAttributeNotEquals(mixed $expected, string $actualAttributeName, string $actualClassOrObject, string $message = \'\', float $delta = 0, integer $maxDepth = 10, boolean $canonicalize = false, boolean $ignoreCase = false)',
		'* @method assertAttributeNotInstanceOf(string $expected, string $attributeName, mixed $classOrObject, string $message = \'\')',
		'* @method assertAttributeNotInternalType(string $expected, string $attributeName, mixed $classOrObject, string $message = \'\')',
		'* @method assertAttributeNotSame(mixed $expected, string $actualAttributeName, object $actualClassOrObject, string $message = \'\')',
		'* @method assertAttributeSame(mixed $expected, string $actualAttributeName, object $actualClassOrObject, string $message = \'\')',
		'* @method assertClassHasAttribute(string $attributeName, string $className, string $message = \'\')',
		'* @method assertClassHasStaticAttribute(string $attributeName, string $className, string $message = \'\')',
		'* @method assertClassNotHasAttribute(string $attributeName, string $className, string $message = \'\')',
		'* @method assertClassNotHasStaticAttribute(string $attributeName, string $className, string $message = \'\')',
		'* @method assertContains(mixed $needle, mixed $haystack, string $message = \'\', boolean $ignoreCase = false, boolean $checkForObjectIdentity = true)',
		'* @method assertContainsOnly(string $type, mixed $haystack, boolean $isNativeType = null, string $message = \'\')',
		'* @method assertCount(integer $expectedCount, mixed $haystack, string $message = \'\')',
		'* @method assertEmpty(mixed $actual, string $message = \'\')',
		'* @method assertEqualXMLStructure(DOMElement $expectedElement, DOMElement $actualElement, boolean $checkAttributes = false, string $message = \'\')',
		'* @method assertEquals(mixed $expected, mixed $actual, string $message = \'\', float $delta = 0, integer $maxDepth = 10, boolean $canonicalize = false, boolean $ignoreCase = false)',
		'* @method assertFalse(boolean $condition, string $message = \'\')',
		'* @method assertFileEquals(string $expected, string $actual, string $message = \'\', boolean $canonicalize = false, boolean $ignoreCase = false)',
		'* @method assertFileExists(string $filename, string $message = \'\')',
		'* @method assertFileNotEquals(string $expected, string $actual, string $message = \'\', boolean $canonicalize = false, boolean $ignoreCase = false)',
		'* @method assertFileNotExists(string $filename, string $message = \'\')',
		'* @method assertGreaterThan(mixed $expected, mixed $actual, string $message = \'\')',
		'* @method assertGreaterThanOrEqual(mixed $expected, mixed $actual, string $message = \'\')',
		'* @method assertInstanceOf(string $expected, mixed $actual, string $message = \'\')',
		'* @method assertInternalType(string $expected, mixed $actual, string $message = \'\')',
		'* @method assertJsonStringEqualsJsonString(string $expectedJson, string $actualJson, string $message = \'\')',
		'* @method assertJsonStringNotEqualsJsonString(string $expectedJson, string $actualJson, string $message = \'\')',
		'* @method assertJsonStringEqualsJsonFile(string $expectedFile, string $actualJson, string $message = \'\')',
		'* @method assertJsonStringNotEqualsJsonFile(string $expectedFile, string $actualJson, string $message = \'\')',
		'* @method assertJsonFileNotEqualsJsonFile(string $expectedFile, string $actualFile, string $message = \'\')',
		'* @method assertJsonFileEqualsJsonFile(string $expectedFile, string $actualFile, string $message = \'\')',
		'* @method assertLessThan(mixed $expected, mixed $actual, string $message = \'\')',
		'* @method assertLessThanOrEqual(mixed $expected, mixed $actual, string $message = \'\')',
		'* @method assertNotContains(mixed $needle, mixed $haystack, string $message = \'\', boolean $ignoreCase = false, boolean $checkForObjectIdentity = true)',
		'* @method assertNotContainsOnly(string $type, mixed $haystack, boolean $isNativeType = null, string $message = \'\')',
		'* @method assertNotCount(integer $expectedCount, mixed $haystack, string $message = \'\')',
		'* @method assertNotEmpty(mixed $actual, string $message = \'\')',
		'* @method assertNotEquals(mixed $expected, mixed $actual, string $message = \'\', float $delta = 0, integer $maxDepth = 10, boolean $canonicalize = false, boolean $ignoreCase = false)',
		'* @method assertNotInstanceOf(string $expected, mixed $actual, string $message = \'\')',
		'* @method assertNotInternalType(string $expected, mixed $actual, string $message = \'\')',
		'* @method assertNotNull(mixed $actual, string $message = \'\')',
		'* @method assertNotRegExp(string $pattern, string $string, string $message = \'\')',
		'* @method assertNotSame(mixed $expected, mixed $actual, string $message = \'\')',
		'* @method assertNotSameSize(integer $expected, mixed $actual, string $message = \'\')',
		'* @method assertNotTag(array $matcher, string $actual, string $message = \'\', boolean $isHtml = true)',
		'* @method assertNull(mixed $actual, string $message = \'\')',
		'* @method assertObjectHasAttribute(string $attributeName, object $object, string $message = \'\')',
		'* @method assertObjectNotHasAttribute(string $attributeName, object $object, string $message = \'\')',
		'* @method assertRegExp(string $pattern, string $string, string $message = \'\')',
		'* @method assertSame( mixed $expected, mixed $actual, string $message = \'\')',
		'* @method assertSameSize(integer $expected, mixed $actual, string $message = \'\')',
		'* @method assertSelectCount(array $selector, integer $count, mixed $actual, string $message = \'\', boolean $isHtml = true)',
		'* @method assertSelectEquals(array $selector, string $content, integer $count, mixed $actual, string $message = \'\', boolean $isHtml = true)',
		'* @method assertSelectRegExp(array $selector, string $pattern, integer $count, mixed $actual, string $message = \'\', boolean $isHtml = true)',
		'* @method assertStringEndsNotWith(string $suffix, string $string, string $message = \'\')',
		'* @method assertStringEndsWith(string $suffix, string $string, string $message = \'\')',
		'* @method assertStringEqualsFile(string $expectedFile, string $actualString, string $message = \'\', boolean $canonicalize = false, boolean $ignoreCase = false)',
		'* @method assertStringMatchesFormat(string $format, string $string, string $message = \'\')',
		'* @method assertStringMatchesFormatFile(string $formatFile, string $string, string $message = \'\')',
		'* @method assertStringNotEqualsFile(string $expectedFile, string $actualString, string $message = \'\', boolean $canonicalize = false, boolean $ignoreCase = false)',
		'* @method assertStringNotMatchesFormat(string $format, string $string, string $message = \'\')',
		'* @method assertStringNotMatchesFormatFile(string $formatFile, string $string, string $message = \'\')',
		'* @method assertStringStartsNotWith(string $prefix, string $string, string $message = \'\')',
		'* @method assertStringStartsWith(string $prefix, string $string, string $message = \'\')',
		'* @method assertTag(array $matcher, string $actual, string $message = \'\', boolean $isHtml = true)',
		'* @method assertThat(mixed $value, PHPUnit_Framework_Constraint $constraint, string $message = \'\')',
		'* @method assertTrue(boolean $condition, string $message = \'\')',
		'* @method assertXmlFileEqualsXmlFile(string $expectedFile, string $actualFile, string $message = \'\')',
		'* @method assertXmlFileNotEqualsXmlFile(string $expectedFile, string $actualFile, string $message = \'\')',
		'* @method assertXmlStringEqualsXmlFile(string $expectedFile, string $actualXml, string $message = \'\')',
		'* @method assertXmlStringEqualsXmlString(string $expectedXml, string $actualXml, string $message = \'\')',
		'* @method assertXmlStringNotEqualsXmlFile(string $expectedFile, string $actualXml, string $message = \'\')',
		'* @method assertXmlStringNotEqualsXmlString(string $expectedXml, string $actualXml, string $message = \'\')',
		'*/',
		'class PHPUnit_Framework_TestCase {};',
		'// End of code generation'
	);

	/**
	 * Abstractクラス
	 * @var type array
	 */
	private static $abstracts = array( 'Authenticator' );

	/**
	 * function定義をクラス定義に付け加えるためのコード
	 *
	 * 自動に生成されるコードで足りない場合、
	 * 自分でfunctionを定義することで、補完できるようになる
	 * クラス名がキー、追加するコードを値として定義する
	 *
	 * @var type array
	 */
	private static $extra = array(
		'Example_class_name' => array(
			'    function add_code_1() {}',
			'    function add_code_2($arg1, $arg2) {}',
		),
	);

	/**
	 * 生成コードの表示
	 *
	 * 使用法：
	 * 		php artisan ccc
	 *
	 * @return integer 実行結果コード
	 */
	public function run()
	{
		echo $this->generator();

		exit(0);
	}

	/**
	 * コード補完コードを生成し、ファイルに保存する
	 *
	 * 使用法
	 * 		// application/ccc.phpに保存
	 * 			php artisan ccc:save
	 *
	 * 		// パラメーターで保存ファイルを指定
	 * 			php artisan ccc:save application/cc_helper.php
	 *
	 * @param string $outfile 出力ファイル名
	 * @return integer 実行結果コード
	 */
	public function save($arguments)
	{
		$outfile = count($arguments) == 0 ? path('app')."ccc.php" : $arguments[0];

		$codes = $this->generator();

		File::put($outfile, $codes);

		exit(0);
	}

	/**
	 * ジェネレーター本体
	 *
	 * @return string 生成コード
	 */
	private function generator()
	{
		$codeline = array( );
		$codeline[] = self::$header;

		$aliases = Config::get('application.aliases');

		foreach ( $aliases as $alias => $namespace ) {
			switch ( $alias ) {
				case 'Auth' :
					switch ( Config::get('auth.driver') ) {
						case 'eloquent' :
							$codeline[] = $this->format_code($alias, 'Laravel\Auth\Drivers\Eloquent');
							break;
						case 'fluent' :
							$codeline[] = $this->format_code($alias, 'Laravel\Auth\Drivers\Fluent');
							break;
						default :
							// throw new \Exception("Bad Auth driver [$alias] specified.");
							$codeline[] = "// Auth driver [$alias] is not supported by this generator. Please set this by your hand.";
							$codeline[] = '// class '.$alias.' extends '.$namespace.'{};';
							$codeline[] = 'class_alias(\''.$alias.'\', \''.$namespace.'\');';
					}
					break;
				case 'DB' :
					switch ( Config::get('database.default') ) {
						case 'sqlite':
							$namespace = 'Laravel\Database\Query\Grammars\SQLite';
							break;
						case 'mysql':
							$namespace = 'Laravel\Database\Query\Grammars\MySQL';
							break;
						case 'pgsql':
							$namespace = 'Laravel\Database\Query\Grammars\Postgres';
							break;
						case 'sqlsrv':
							$namespace = 'Laravel\Database\Query\Grammars\SQLServer';
							break;
						default:
							// throw new \Exception("Bad database default driver [$alias] specified.");
							$codeline[] = "// DB default driver [$alias] is not supported by this generator. Please set this by your hand.";
							$codeline[] = '// class '.$alias.' extends '.$namespace.'{};';
							$codeline[] = 'class_alias(\''.$alias.'\', \''.$namespace.'\');';
					}
					$codeline[] = $this->format_code($alias, $namespace);
					break;
				case 'Cache' :
					switch ( Config::get('cache.driver') ) {
						case 'apc':
							$codeline[] = $this->format_code($alias, 'Laravel\Cache\Drivers\APC');
							break;
						case 'file':
							$codeline[] = $this->format_code($alias, 'Laravel\Cache\Drivers\File');
							break;
						case 'memcached':
							$codeline[] = $this->format_code($alias, 'Laravel\Cache\Drivers\Memcached');
							break;
						case 'memory':
							$codeline[] = $this->format_code($alias, 'Laravel\Cache\Drivers\Memory');
							break;
						case 'redis':
							$codeline[] = $this->format_code($alias, 'Laravel\Cache\Drivers\Redis');
							break;
						case 'database':
							$codeline[] = $this->format_code($alias, 'Laravel\Cache\Drivers\Database');
							break;
						default:
							// throw new \Exception("Bad Cache driver [$alias] specified.");
							$codeline[] = "// Cache driver [$alias] is not supported by this generator. Please set this by your hand.";
							$codeline[] = '// class '.$alias.' extends '.$namespace.'{};';
							$codeline[] = 'class_alias(\''.$alias.'\', \''.$namespace.'\');';
					}
					break;
				case 'Session' :
					switch ( Config::get('session.driver') ) {
						case 'apc':
							$drivername = 'Session\Drivers\APC';
							break;
						case 'cookie':
							$drivername = 'Session\Drivers\Cookie';
							break;
						case 'database':
							$drivername = 'Session\Drivers\Database';
							break;
						case 'file':
							$drivername = 'Session\Drivers\File';
							break;
						case 'memcached':
							$drivername = 'Session\Drivers\Memcached';
							break;
						case 'memory':
							$drivername = 'Session\Drivers\Memory';
							break;
						case 'redis':
							$drivername = 'Session\Drivers\Redis';
							break;
						default:
							// throw new \Exception("Bad Session driver [$alias] specified.");
							$codeline[] = "// Session driver [$alias] is not supported by this generator. Please set this by your hand.";
							$codeline[] = '// class '.$alias.' extends '.$namespace.'{};';
							$codeline[] = 'class_alias(\''.$alias.'\', \''.$namespace.'\');';
					}
					$drivername = strtr(path('sys').Str::lower($drivername.EXT), '\\', '/');
					$script = explode(PHP_EOL, File::get($drivername, "// Failed to read driver soruce file:[$drivername]"));

					$add = preg_grep("/function\s+\w+\s*\(.+\)/", $script);
					array_walk(&$add, function(&$val) {
							$val.='{}';
						});
					$add = array(
						"// Generated from $drivername",
						"// But maybe they are not so useful... :)",
						$add );

					$codeline[] = $this->format_code($alias, "Laravel\Session\Payload", $add);
					break;
				default :
					$codeline[] = $this->format_code($alias, $namespace);
			}
		}

		$codeline[] = self::$footer;
		$codeline[] = '';

		$flatcode = array( );
		array_walk_recursive($codeline, function($val) use (&$flatcode) {
				$flatcode[] = $val;
			});

		return implode(PHP_EOL, $flatcode);
	}

	/**
	 * クラスの定義をフォーマット
	 *
	 * @param string $alias エイリアス名
	 * @param string $namespace 名前空間
	 * @return array
	 */
	private function format_code($alias, $namespace, $addcodes = array( ))
	{
		$abs = in_array($alias, self::$abstracts) ? 'abstract ' : '';

		if ( key_exists($alias, self::$extra) || !empty($addcodes) ) {
			$ret = array( );
			$ret[] = $abs.'class '.$alias.' extends '.$namespace.'{';
			if ( key_exists($alias, self::$extra) )
				$ret[] = self::$extra[$alias];
			if ( !empty($addcodes) )
				$ret[] = $addcodes;
			$ret[] = '};';
			return $ret;
		}
		else {
			return array(
				$abs.'class '.$alias.' extends '.$namespace.'{};',
				'class_alias(\''.$alias.'\', \''.$namespace.'\');',
			);
		}
	}

}